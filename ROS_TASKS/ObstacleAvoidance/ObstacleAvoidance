#include <rclcpp/rclcpp.hpp>
#include <sensor_msgs/msg/nav_sat_fix.hpp>
#include <sensor_msgs/msg/imu.hpp>
#include <geometry_msgs/msg/twist.hpp>
#include <sensor_msgs/msg/laser_scan.hpp>
#include <cmath>
#include <optional>
#include <iostream>
#include <map>
#include <algorithm>

class AutonomousNavigator : public rclcpp::Node
{
public:
    AutonomousNavigator() : Node("autonomous_navigator")
    {
        std::cout << "Enter target latitude: ";
        std::cin >> target_lat_;
        std::cout << "Enter target longitude: ";
        std::cin >> target_lon_;

        gps_sub_ = create_subscription<sensor_msgs::msg::NavSatFix>(
            "/gps", 10, std::bind(&AutonomousNavigator::onGpsData, this, std::placeholders::_1));

        imu_sub_ = create_subscription<sensor_msgs::msg::Imu>(
            "/imu", 10, std::bind(&AutonomousNavigator::onImuData, this, std::placeholders::_1));

        velocity_pub_ = create_publisher<geometry_msgs::msg::Twist>("/cmd_vel", 10);

        lidar_sub_ = create_subscription<sensor_msgs::msg::LaserScan>(
            "/scan", 10, std::bind(&AutonomousNavigator::onLidarData, this, std::placeholders::_1));
    }

private:
    rclcpp::Subscription<sensor_msgs::msg::NavSatFix>::SharedPtr gps_sub_;
    rclcpp::Subscription<sensor_msgs::msg::Imu>::SharedPtr imu_sub_;
    rclcpp::Publisher<geometry_msgs::msg::Twist>::SharedPtr velocity_pub_;
    rclcpp::Subscription<sensor_msgs::msg::LaserScan>::SharedPtr lidar_sub_;

    double current_lat_, current_lon_, target_lat_, target_lon_;
    double current_heading_, start_lat_, start_lon_, target_heading_;
    double rover_heading_, path_error_;

    bool target_reached_ = false;
    bool obstacle_detected_ = false;
    bool hit_point_set_ = false;
    bool leave_point_set_ = false;
    bool gps_control_ = true;
    bool move_to_goal_ = false;

    double hit_point_lat_, hit_point_lon_;
    double distance_to_target_;

    void onGpsData(const sensor_msgs::msg::NavSatFix::SharedPtr msg)
{
    if (target_reached_)
    {
        publishVelocity(0.0, 0.0);
        return;
    }

    current_lat_ = msg->latitude;
    current_lon_ = msg->longitude;

    if (start_lat_ == 0 && start_lon_ == 0)
    {
        start_lat_ = current_lat_;
        start_lon_ = current_lon_;
        target_heading_ = calculateHeading(start_lat_, start_lon_, target_lat_, target_lon_);
    }

    rover_heading_ = calculateHeading(start_lat_, start_lon_, current_lat_, current_lon_);
    path_error_ = std::abs(target_heading_ - rover_heading_);

    distance_to_target_ = calculateDistance(current_lat_, current_lon_, target_lat_, target_lon_);
    double desired_heading = calculateHeading(current_lat_, current_lon_, target_lat_, target_lon_);

    desired_heading = normalizeAngle(desired_heading);
    current_heading_ = normalizeAngle(current_heading_);

    double angular_error = normalizeAngle(desired_heading - current_heading_);

    if (distance_to_target_ < 0.7)
    {
        publishVelocity(0.0, 0.0);
        RCLCPP_INFO(get_logger(), "Target reached.");
        target_reached_ = true;
        return;
    }

    // Proportional control for angular velocity
    const double k_angular = 1.0;       // Gain for angular velocity
    const double max_angular_velocity = 0.5;
    double angular_velocity = k_angular * angular_error;
    angular_velocity = std::clamp(angular_velocity, -max_angular_velocity, max_angular_velocity);

    // Scale linear velocity inversely to angular error
    const double max_linear_velocity = 0.8;
    double linear_velocity = max_linear_velocity * (1.0 - std::abs(angular_error) / M_PI);
    linear_velocity = std::max(0.1, linear_velocity); // Ensure a minimum forward velocity

    if (gps_control_ || move_to_goal_)
    {
        publishVelocity(linear_velocity, angular_velocity);
    }
}

void publishVelocity(double linear, double angular)
{
    // Apply a simple low-pass filter to angular velocity for smoothness
    static double last_angular_velocity = 0.0;
    const double alpha = 0.7; // Smoothing factor (0 < alpha < 1)
    angular = alpha * last_angular_velocity + (1.0 - alpha) * angular;
    last_angular_velocity = angular;

    auto twist_msg = geometry_msgs::msg::Twist();
    twist_msg.linear.x = linear;
    twist_msg.angular.z = angular;
    velocity_pub_->publish(twist_msg);
}


    void onImuData(const sensor_msgs::msg::Imu::SharedPtr msg)
    {
        auto q = msg->orientation;
        double siny_cosp = 2.0 * (q.w * q.z + q.x * q.y);
        double cosy_cosp = 1.0 - 2.0 * (q.y * q.y + q.z * q.z);
        current_heading_ = std::atan2(siny_cosp, cosy_cosp);
    }

    void onLidarData(const sensor_msgs::msg::LaserScan::SharedPtr msg)
    {
        std::map<std::string, double> regions;

        if (!target_reached_)
        {
            int num_ranges = msg->ranges.size();
            if (num_ranges < 360)
            {
                RCLCPP_WARN(get_logger(), "Unexpected number of LiDAR readings: %d", num_ranges);
                return;
            }

            regions["right"] = *std::min_element(msg->ranges.begin() + 270, msg->ranges.begin() + 330);
            double front_min_1 = *std::min_element(msg->ranges.begin() + 330, msg->ranges.begin() + 360);
            double front_min_2 = *std::min_element(msg->ranges.begin(), msg->ranges.begin() + 30);
            regions["front"] = std::min(front_min_1, front_min_2);
            regions["left"] = *std::min_element(msg->ranges.begin() + 30, msg->ranges.begin() + 90);

            double min_obstacle_distance = std::min({regions["right"], regions["front"], regions["left"]});

            if (distance_to_target_ < min_obstacle_distance)
            {
                move_to_goal_ = true;
                gps_control_ = true;
                obstacle_detected_ = false;
                hit_point_set_ = false;
            }
            else if (detectObstacle(msg))
            {
                move_to_goal_ = false;
                gps_control_ = false;
                obstacle_detected_ = true;
                followWall(regions);
            }
        }
    }

    bool detectObstacle(const sensor_msgs::msg::LaserScan::SharedPtr msg)
    {
        double threshold = 1.5;
        for (const auto &range : msg->ranges)
        {
            if (range < threshold)
            {
                return true;
            }
        }
        return false;
    }

    void followWall(std::map<std::string, double> &regions)
    {double min_threshold = 1.5;
        double linear_vel = 0.3;
        double angular_vel = 0.4;

        if (regions["front"] < min_threshold)
        {
            if (!hit_point_set_)
            {
                hit_point_set_ = true;
                leave_point_set_ = false;
                hit_point_lat_ = current_lat_;
                hit_point_lon_ = current_lon_;
                gps_control_ = false;
            }
            publishVelocity(0.0, angular_vel);
        }
        else if (!leave_point_set_)
        {
            if (regions["right"] >= min_threshold)
            {
                publishVelocity(linear_vel, -angular_vel);
            }
            else
            {
                publishVelocity(linear_vel, angular_vel);
            }
        }

        if (path_error_ < 0.1 && calculateDistance(hit_point_lat_, hit_point_lon_, current_lat_, current_lon_) > 2.0)
        {
            if (!gps_control_)
            {
                RCLCPP_INFO(get_logger(), "Switching back to GPS control.");
            }
            gps_control_ = true;
            leave_point_set_ = true;
            hit_point_set_ = false;
        }
    }

    double calculateDistance(double lat1, double lon1, double lat2, double lon2)
    {
        const double R = 6371000;
        const double to_rad = M_PI / 180.0;

        double dlat = (lat2 - lat1) * to_rad;
        double dlon = (lon2 - lon1) * to_rad;

        double a = std::sin(dlat / 2) * std::sin(dlat / 2) +
                   std::cos(lat1 * to_rad) * std::cos(lat2 * to_rad) *
                   std::sin(dlon / 2) * std::sin(dlon / 2);

        double c = 2 * std::atan2(std::sqrt(a), std::sqrt(1 - a));
        return R * c;
    }

    double calculateHeading(double lat1, double lon1, double lat2, double lon2)
    {
        const double to_rad = M_PI / 180.0;
        double dlon = (lon2 - lon1) * to_rad;

        double y = std::sin(dlon) * std::cos(lat2 * to_rad);
        double x = std::cos(lat1 * to_rad) * std::sin(lat2 * to_rad) -
                   std::sin(lat1 * to_rad) * std::cos(lat2 * to_rad) * std::cos(dlon);

        return M_PI + M_PI_2 - std::atan2(y, x);
    }

    double normalizeAngle(double angle)
    {
        while (angle > M_PI)
            angle -= 2 * M_PI;
        while (angle < -M_PI)
            angle += 2 * M_PI;
        return angle;
    }
};
int main(int argc, char *argv[])
{
    rclcpp::init(argc, argv);
    rclcpp::spin(std::make_shared<AutonomousNavigator>());
    rclcpp::shutdown();
    return 0;
}
