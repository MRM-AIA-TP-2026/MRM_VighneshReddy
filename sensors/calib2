#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Imu, MagneticField
import board
import busio
import adafruit_bno055
from builtin_interfaces.msg import Time

class BNO055Publisher(Node):
    def __init__(self):
        super().__init__('bno055_node')
        self.publisher_imu = self.create_publisher(Imu, 'imu/data', 10)
        self.publisher_mag = self.create_publisher(MagneticField, 'imu/mag', 10)
        self.timer = self.create_timer(0.1, self.timer_callback)  # 10 Hz

        try:
            i2c = busio.I2C(board.SCL, board.SDA)
            self.sensor = adafruit_bno055.BNO055_I2C(i2c)

            # Apply calibration data
            self.sensor.offsets_accelerometer = [-52, -12, -45]
            self.sensor.offsets_gyroscope = [0, -1, 2]
            self.sensor.offsets_magnetometer = [-633, -362, -246]
            self.sensor.radius_accelerometer = 1000
            self.sensor.radius_magnetometer = 692

            self.get_logger().info('BNO055 IMU Publisher Node Started with Calibration')
        except Exception as e:
            self.get_logger().error(f'Failed to initialize BNO055 sensor: {e}')
            raise

    def is_valid(self, data):
        return data is not None and all(d is not None for d in data)

    def timer_callback(self):
        accel = self.sensor.linear_acceleration
        gyro = self.sensor.gyro
        quat = self.sensor.quaternion
        mag = self.sensor.magnetic

        if not all(map(self.is_valid, [accel, gyro, quat, mag])):
            self.get_logger().warn('Incomplete sensor data. Skipping this cycle.')
            return

        imu_msg = Imu()
        mag_msg = MagneticField()
        now = self.get_clock().now().to_msg()
        imu_msg.header.stamp = now
        imu_msg.header.frame_id = 'imu_link'

        imu_msg.linear_acceleration.x = float(accel[0])
        imu_msg.linear_acceleration.y = float(accel[1])
        imu_msg.linear_acceleration.z = float(accel[2])

        imu_msg.angular_velocity.x = float(gyro[0])
        imu_msg.angular_velocity.y = float(gyro[1])
        imu_msg.angular_velocity.z = float(gyro[2])

        imu_msg.orientation.x = float(quat[0])
        imu_msg.orientation.y = float(quat[1])
        imu_msg.orientation.z = float(quat[2])
        imu_msg.orientation.w = float(quat[3])

        imu_msg.linear_acceleration_covariance = [0.01, 0.0, 0.0,
                                                  0.0, 0.01, 0.0,
                                                  0.0, 0.0, 0.01]
        imu_msg.angular_velocity_covariance = [0.01, 0.0, 0.0,
                                               0.0, 0.01, 0.0,
                                               0.0, 0.0, 0.01]
        imu_msg.orientation_covariance = [0.01, 0.0, 0.0,
                                          0.0, 0.01, 0.0,
                                          0.0, 0.0, 0.01]

        mag_msg.header.stamp = now
        mag_msg.header.frame_id = 'imu_link'
        mag_msg.magnetic_field.x = float(mag[0]) * 1e-6  # ÂµT to Tesla
        mag_msg.magnetic_field.y = float(mag[1]) * 1e-6
        mag_msg.magnetic_field.z = float(mag[2]) * 1e-6

        self.publisher_imu.publish(imu_msg)
        self.publisher_mag.publish(mag_msg)


def main(args=None):
    rclpy.init(args=args)
    node = BNO055Publisher()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()

